on:
  workflow_call:
    inputs:
      working-directory:
        description: 'custom git dir'
        required: true
        type: string
      nochange:
        description: 'not changed files in pr'
        required: true
        type: string
      allow_tf:
        description: 'allow terraform calls'
        required: false
        type: string
      main-branch:
        description: 'main tree of git'
        required: false
        default: 'refs/heads/master'
        type: string
      job_name:
        description: 'name of job'
        required: false
        default: 'Terraform'
        type: string
      environment:
        description: 'reference centralized secrets'
        required: false
        default: 'staging'
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'access for aws like infra'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'access for aws like infra'
        required: true
      AWS_ENDPOINT_URL_DYNAMODB:
        description: 'access for aws like infra'
        required: false
      YC_TOKEN:
        description: 'access for aws like infra'
        required: false
    outputs:
      nochange:
        description: "no changes plan or applied"
        value: ${{ jobs.terraform.outputs.nochange }}
      applied:
        description: "plan applied"
        value: ${{ jobs.terraform.outputs.applied }}

run-name: ${{ inputs.job_name }} by @${{ github.actor }}
jobs:
  # conditions:
  #   name: "conditions"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Skipped
  #       run: "echo 'Skipped' ${{ inputs.nochange }} and ${{ inputs.allow_tf }}"

  terraform:
    if: inputs.allow_tf == 'true'
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      applied: ${{ steps.apply.outcome == 'success' }}
      nochange: ${{ steps.nochange.outcome == 'success' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL_DYNAMODB: ${{ secrets.AWS_ENDPOINT_URL_DYNAMODB }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          terraform_wrapper: true

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -input=false -no-color -out=plan.tmp
          terraform show -no-color plan.tmp > ${GITHUB_WORKSPACE}/plan.out
        continue-on-error: true
      
      - name: Terraform Plan skipped
        if: steps.plan.outcome != 'success'
        run: echo -n "" >> ${GITHUB_WORKSPACE}/plan.out

      - name: plan reqchange
        id: plan_reqchange
      #  if: ${{ steps.plan.outcome == 'skipped' || steps.plan.outputs.exitcode == '2' }}
        if: ${{ steps.plan.outcome == 'skipped' ||
                (
                  steps.plan.outcome == 'success' &&
                  contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.') != true
                ) }}
        run: "echo plan skipped or req changes"

      - name: Terraform Apply
        id: apply
        if: ${{ steps.plan_reqchange.outcome == 'success' &&
                (
                  ( github.ref == inputs.main-branch && github.event_name == 'push' ) ||
                  inputs.nochange == 'true'
                ) }}
        run: |
          terraform apply -auto-approve -no-color -input=false -out=apply.tmp
          terraform show -no-color apply.tmp > ${GITHUB_WORKSPACE}/apply.out
        continue-on-error: true
        
      - name: Terraform Apply skipped
        if: steps.apply.outcome != 'success'
        run: echo -n "" >> ${GITHUB_WORKSPACE}/apply.out

      - uses: actions/github-script@v7
        id: state
        #Plan: 19 to add, 0 to change, 0 to destroy.
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const inputs =
            {
              "job_name":"${{ inputs.job_name }}",
              "working-directory":"${{ inputs.working-directory }}",
            }
            const githublost=
            {
              "event.pull_request.head.sha": "${{ github.event.pull_request.head.sha }}",
              "actor": "${{ github.actor }}",
              "event_name": "${{ github.event_name }}",
              "workflow": "${{ github.workflow }}"
            }
            const steps =
            {
              "fmt.outcome": "${{ steps.fmt.outcome }}",
              "init.outcome": "${{ steps.init.outcome }}",
              "validate.outcome": "${{ steps.validate.outcome }}",
              "plan.outcome": "${{ steps.plan.outcome }}",
              "plan_reqchange.outcome": "${{ steps.plan_reqchange.outcome }}",
              "apply.outcome": "${{ steps.apply.outcome }}"
            }
            
            const script = require('./.github/message.js')
            script({process, github, context, inputs, githublost, steps})
        continue-on-error: true
        
      - name: No changes
        id: nochange
        if: ${{ steps.apply.outcome == 'success' ||
                (
                  steps.plan.outcome == 'skipped' ||
                  (
                    steps.plan.outcome == 'success' &&
                    contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.')
                  )
                ) }}
        #if: ${{ steps.apply.outcome == 'success' || steps.plan.outcome == 'skipped' || steps.plan.outputs.exitcode == '0' }}
        run: "echo apply: ${{ steps.apply.outcome }}, plan: ${{ steps.plan.outcome }}"

      - name: Terraform Status
        if: steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure'
        run: exit 1
