name: "Terraform"
on:
  workflow_call:
    inputs:
      working-directory:
        description: 'custom git dir'
        required: true
        type: string
      condition:
        description: 'to execute must be "true"'
        required: true
        type: boolean
      main-branch:
        description: 'main tree of git'
        required: false
        default: 'refs/heads/master'
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'access for aws like infra'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'access for aws like infra'
        required: true
      AWS_ENDPOINT_URL_DYNAMODB:
        description: 'access for aws like infra'
        required: false
      YC_TOKEN:
        description: 'access for aws like infra'
        required: false
    outputs:
      nochange:
        description: "no changes planned or applied"
        value: ${{ inputs.condition != true || jobs.terraform.outputs.nochange }}
      applied:
        description: "plan applied"
        value: ${{ inputs.condition && jobs.terraform.outputs.applied }}
jobs:
  terraform:
    if: inputs.condition == true
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      applied: ${{ steps.apply.outcome == 'success' }}
      nochange: ${{ steps.apply.outcome == 'success' ||
                (
                  steps.planned.outcome == 'success' &&
                  contains(steps.planned.stdout, 'No changes. Your infrastructure matches the configuration.')
                )}}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL_DYNAMODB: ${{ secrets.AWS_ENDPOINT_URL_DYNAMODB }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.4

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
      
      - name: Terraform Apply
        id: apply
        if: ${{ github.ref == inputs.main-branch && github.event_name == 'push' }}
        run: terraform apply -auto-approve -no-color
        continue-on-error: true
        
      - uses: actions/github-script@v7
        id: state
        #Plan: 19 to add, 0 to change, 0 to destroy.
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            
            <details><summary>Show Details</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            Results for commit: ${{ github.event.pull_request.head.sha }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure'
        run: exit 1

  skipped:
    if: inputs.condition != true
    name: "Skipped"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL_DYNAMODB: ${{ secrets.AWS_ENDPOINT_URL_DYNAMODB }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
    steps:
      - name: Skipped
        run: "echo 'Skipped' ${{ inputs.condition }}"
